{"version":3,"sources":["AppStyle.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","height","toolbar","paddingRight","toolbarIcon","display","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","title","flexGrow","appBarSpacer","content","container","paddingLeft","paddingBottom","spacing","noHeader","paddingTop","paper","overflow","flexDirection","fabGreen","backgroundColor","fabRed","nested","btnGreen","btnRed","library","add","faLightbulb","faKey","faTemperatureHigh","faChartBar","faTint","faFan","faWindowMaximize","faFire","faHdd","faMemory","faLaptop","faSlidersH","faBug","faLayerGroup","faMicrochip","faBolt","faMoneyBillAlt","faBurn","faShower","faPlug","faClock","faStopwatch","faToggleOn","faNetworkWired","faFish","faChartArea","RenderIcon","React","memo","props","img","icon","RenderSwitch","useState","Value","checked","setChecked","Switch","edge","color","onChange","event","fetch","baseUrl","ID","method","body","RenderButton","classes","Button","variant","className","Label","RenderValue","Typography","Unit","RenderRange","parseFloat","value","setValue","t","toString","ButtonGroup","style","boxShadow","onClick","fontSize","component","border","toFixed","RenderGroupButton","items","isOpen","viewBox","RenderState","Fab","size","RenderType","Type","count","Badge","badgeContent","max","Fragment","RenderChart","data","setData","getData","keepalive","then","response","ok","Error","statusText","json","values","unshift","useEffect","interval","setInterval","clearInterval","width","chartType","loader","options","chartArea","legend","RenderSubItem","open","setOpen","RenderItem","Img","LastUpdate","HistoryEnabled","Collapse","in","timeout","unmountOnExit","secondary","marginLeft","marginRight","ListItem","ListItemIcon","SubItems","ListItemText","primary","ListItemSecondaryAction","List","disablePadding","map","item","App","Rows","Array","intervalID","setIntervalID","wsRef","useRef","address","qs","window","location","search","username","password","auth","host","wsUrl","replace","isNative","mode","notify","useCallback","msg","enqueueSnackbar","autoHideDuration","anchorOrigin","vertical","horizontal","fetchData","headers","Headers","authString","set","btoa","resp","catch","e","setTimeout","ref","url","onOpen","id","current","sendMessage","JSON","stringify","onMessage","rows","forEach","row","i","Item","curr","updateData","parse","onClose","reconnectIntervalInMilliSeconds","CssBaseline","AppBar","position","Toolbar","noWrap","Container","clsx","withSnackbar","Boolean","hostname","match","ReactDOM","render","maxSnack","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bfc9fd0.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n  },\n  container: {\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingBottom: theme.spacing(2),\n  },\n  noHeader: {\n    paddingTop: theme.spacing(5),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fabGreen: {\n    backgroundColor: \"#3fb553\"\n  },\n  fabRed: {\n    backgroundColor: \"#c74f4f\"\n  },\n  nested: {\n    paddingLeft: theme.spacing(5),\n  },\n  btnGreen: {\n    backgroundColor: \"#3fb553\"\n  },\n  btnRed: {\n    backgroundColor: \"#c74f4f\"\n  }\n}));\n","import React, { useState, useEffect, useCallback, useRef, memo } from 'react';\nimport clsx from 'clsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Switch from '@material-ui/core/Switch';\n\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport { withSnackbar, WithSnackbarProps, VariantType } from 'notistack';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTemperatureHigh, faChartBar, faTint, faFan, faWindowMaximize, faFire, faHdd } from '@fortawesome/free-solid-svg-icons';\nimport { faMemory, faLaptop, faSlidersH, faBug, faLayerGroup, faMicrochip, faBolt, faMoneyBillAlt } from '@fortawesome/free-solid-svg-icons';\nimport { faBurn, faPlug, faShower, faClock, faStopwatch, faToggleOn, faLightbulb } from '@fortawesome/free-solid-svg-icons';\nimport { faKey, faNetworkWired, faFish, faChartArea } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport Collapse from '@material-ui/core/Collapse';\nimport Badge from '@material-ui/core/Badge';\nimport Websocket from 'react-websocket';\nimport * as qs from 'query-string';\nimport Chart from \"react-google-charts\";\n\nimport { useStyles } from './AppStyle';\nimport './App.css';\n\nlibrary.add(faLightbulb, faKey);\nlibrary.add(faTemperatureHigh, faKey);\nlibrary.add(faChartBar, faKey);\nlibrary.add(faTint, faKey);\nlibrary.add(faFan, faKey);\nlibrary.add(faWindowMaximize, faKey);\nlibrary.add(faFire, faKey);\nlibrary.add(faHdd, faKey);\nlibrary.add(faMemory, faKey);\nlibrary.add(faLaptop, faKey);\nlibrary.add(faSlidersH, faKey);\nlibrary.add(faBug, faKey);\nlibrary.add(faLayerGroup, faKey);\nlibrary.add(faMicrochip, faKey);\nlibrary.add(faBolt, faKey);\nlibrary.add(faMoneyBillAlt, faKey);\nlibrary.add(faBurn, faKey);\nlibrary.add(faShower, faKey);\nlibrary.add(faPlug, faKey);\nlibrary.add(faClock, faKey);\nlibrary.add(faStopwatch, faKey);\nlibrary.add(faToggleOn);\nlibrary.add(faNetworkWired);\nlibrary.add(faFish);\nlibrary.add(faChartArea);\n\ninterface Props extends WithSnackbarProps { }\n\ninterface Row {\n  Item: Item\n  SubItems?: Array<Item>\n}\n\ninterface Item {\n  ID: string\n  Type: string\n  Label: string\n  Value: string\n  Img: string\n  Unit: string\n  LastUpdate: string\n  HistoryEnabled: boolean\n}\n\ninterface ItemRenderProps {\n  className?: string\n  baseUrl: string\n\n  ID: string\n  Type: string\n  Label: string\n  Value: string\n  Img: string\n  Unit: string\n  SubItems?: Array<Item>\n  LastUpdate: string\n  HistoryEnabled: boolean\n}\n\ninterface RenderChartProps {\n  className?: string\n  baseUrl: string\n\n  ID: string\n}\n\ninterface IconRenderProps {\n  img: string\n}\n\nconst RenderIcon: React.FC<IconRenderProps> = React.memo((props) => {\n  switch (props.img) {\n    case \"temperature\":\n      return (<FontAwesomeIcon icon=\"temperature-high\" />);\n    case \"humidity\":\n      return (<FontAwesomeIcon icon=\"tint\" />);\n    case \"fan\":\n      return (<FontAwesomeIcon icon=\"fan\" />);\n    case \"window\":\n      return (<FontAwesomeIcon icon=\"window-maximize\" />);\n    case \"radiator\":\n      return (<FontAwesomeIcon icon=\"fire\" />);\n    case \"hdd\":\n      return (<FontAwesomeIcon icon=\"hdd\" />);\n    case \"mem\":\n      return (<FontAwesomeIcon icon=\"memory\" />);\n    case \"sys\":\n      return (<FontAwesomeIcon icon=\"laptop\" />);\n    case \"settings\":\n      return (<FontAwesomeIcon icon=\"sliders-h\" />);\n    case \"dev\":\n      return (<FontAwesomeIcon icon=\"bug\" />);\n    case \"group\":\n      return (<FontAwesomeIcon icon=\"layer-group\" />);\n    case \"cpu\":\n      return (<FontAwesomeIcon icon=\"microchip\" />);\n    case \"electricity\":\n      return (<FontAwesomeIcon icon=\"bolt\" />);\n    case \"price\":\n      return (<FontAwesomeIcon icon=\"money-bill-alt\" />);\n    case \"boiler\":\n      return (<FontAwesomeIcon icon=\"burn\" />);\n    case \"shower\":\n      return (<FontAwesomeIcon icon=\"shower\" />);\n    case \"plug\":\n      return (<FontAwesomeIcon icon=\"plug\" />);\n    case \"clock\":\n      return (<FontAwesomeIcon icon=\"clock\" />);\n    case \"timer\":\n      return (<FontAwesomeIcon icon=\"stopwatch\" />);\n    case \"switch\":\n      return (<FontAwesomeIcon icon=\"toggle-on\" />);\n    case \"light\":\n      return (<FontAwesomeIcon icon=\"lightbulb\" />);\n    case \"network\":\n      return (<FontAwesomeIcon icon=\"network-wired\" />);\n    case \"fish\":\n      return (<FontAwesomeIcon icon=\"fish\" />);\n  }\n\n  return (\n    <FontAwesomeIcon icon=\"chart-bar\" />\n  )\n});\n\nconst RenderSwitch: React.FC<ItemRenderProps> = React.memo((props) => {\n  const [checked, setChecked] = React.useState(props.Value === \"ON\");\n\n  const onChange = (event: any) => {\n    setChecked(!checked)\n\n    fetch(`${props.baseUrl}/item/${props.ID}`, {\n      method: 'POST',\n      body: !checked ? \"ON\" : \"OFF\"\n    });\n  }\n\n  return (\n    <Switch\n      edge=\"end\"\n      color=\"primary\"\n      onChange={onChange}\n      checked={props.Value === \"ON\"}\n    />\n  )\n});\n\nconst RenderButton: React.FC<ItemRenderProps> = React.memo((props) => {\n  const classes = useStyles();\n\n  return (\n    <Button variant=\"contained\" color=\"primary\" className={props.Value === \"ON\" ? classes.btnGreen : \"\"}>\n      {props.Label}\n    </Button>\n  )\n});\n\nconst RenderValue: React.FC<ItemRenderProps> = React.memo((props) => {\n  return (\n    <Typography>{props.Value}{props.Unit}</Typography>\n  )\n});\n\nconst RenderRange: React.FC<ItemRenderProps> = React.memo((props) => {\n  const [value, setValue] = React.useState(parseFloat(props.Value));\n\n  const onChange = (t: number) => {\n    fetch(`${props.baseUrl}/item/${props.ID}`, {\n      method: 'POST',\n      body: t.toString()\n    });\n  }\n\n  return (\n    <ButtonGroup variant=\"contained\" color=\"primary\" style={{ boxShadow: 'none' }}>\n      <Button className=\"Shadow-button\" style={{ padding: '6px 8px' }}\n        aria-label=\"reduce\"\n        onClick={() => {\n          setValue(value - 0.5);\n          onChange(value - 0.5);\n        }}\n      >\n        <RemoveIcon fontSize=\"small\" />\n      </Button>\n      <Button variant=\"outlined\" component=\"span\" className=\"Middle-button\" style={{ padding: '5px 8px', color: '#000', border: 'none' }}>\n        {value.toFixed(1)}\n      </Button>\n      <Button className=\"Shadow-button\" style={{ padding: '6px 8px' }}\n        aria-label=\"increase\"\n        onClick={() => {\n          setValue(value + 0.5);\n          onChange(value + 0.5);\n        }}\n      >\n        <AddIcon fontSize=\"small\" />\n      </Button>\n    </ButtonGroup>\n  )\n});\n\ninterface groupRenderProps {\n  items?: Array<Item>\n  isOpen: boolean\n}\n\nconst RenderGroupButton: React.FC<groupRenderProps> = React.memo((props) => {\n  if (props.items) {\n    if (!props.isOpen) {\n      return (<ExpandLess />);\n    }\n    return (<ExpandMore />);\n  }\n  return (\n    <svg viewBox=\"0 0 24 24\" />\n  )\n});\n\nconst RenderState: React.FC<ItemRenderProps> = React.memo((props) => {\n  const classes = useStyles();\n\n  if (props.Value === \"ON\") {\n    return (\n      <Fab color=\"primary\" aria-label=\"OK\" size=\"small\" className={classes.fabGreen}>\n        <CheckIcon />\n      </Fab>\n    )\n  }\n  return (\n    <Fab color=\"primary\" aria-label=\"KO\" size=\"small\" className={classes.fabRed}>\n      <CloseIcon />\n    </Fab>\n  )\n});\n\nconst RenderType: React.FC<ItemRenderProps> = React.memo((props) => {\n  const classes = useStyles();\n\n  switch (props.Type) {\n    case \"switch\":\n      return (\n        <RenderSwitch {...props} />\n      )\n    case \"value\":\n      return (\n        <RenderValue {...props} />\n      )\n    case \"range\":\n      return (\n        <RenderRange {...props} />\n      )\n    case \"state\":\n      return (\n        <RenderState {...props} />\n      )\n    case \"button\":\n      return (\n        <RenderButton {...props} />\n      )\n    case \"timer\":\n      const value = props.Value === \"OFF\" ? \"OFF\" : \"ON\";\n      const count = (props.Value !== \"OFF\" && props.Value !== \"ON\") ? props.Value : \"0\"\n\n      return (\n        <Badge color=\"primary\" badgeContent={count} max={999}>\n          <Button variant=\"contained\" color=\"primary\" className={props.Value === \"ON\" ? classes.btnGreen : classes.btnRed}>\n            {value}\n          </Button>\n        </Badge>\n      )\n    default:\n      return (\n        <React.Fragment />\n      )\n  }\n});\n\nconst RenderChart: React.FC<RenderChartProps> = React.memo((props) => {\n  const [data, setData] = React.useState([['date', 'value'], [\"00:00\", 0]]);\n\n  const getData = () => {\n    fetch(`${props.baseUrl}/values/${props.ID}`, {\n      keepalive: false\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error(response.statusText)\n      }\n      response.json().then(values => {\n        values.unshift(['date', 'value'])\n        setData(values)\n      })\n    })\n  }\n\n  useEffect(() => {\n    getData()\n\n    const interval = setInterval(() => {\n      getData()\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Chart\n      width={'100%'}\n      height={'250px'}\n      chartType=\"AreaChart\"\n      loader={<div>Loading data</div>}\n      data={data}\n      options={{\n        chartArea: { width: '80%', height: '70%' },\n        backgroundColor: '#fafafa',\n        legend: 'none',\n      }}\n    />\n  )\n})\n\nconst RenderSubItem: React.FC<ItemRenderProps> = React.memo((props) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <div onClick={() => { setOpen(!open) }}>\n      <RenderItem key={props.ID} className={classes.nested}\n        ID={props.ID}\n        Type={props.Type}\n        Img={props.Img}\n        Label={props.Label}\n        Value={props.Value}\n        Unit={props.Unit}\n        LastUpdate={props.LastUpdate}\n        HistoryEnabled={props.HistoryEnabled}\n        baseUrl={props.baseUrl}\n      />\n      {props.HistoryEnabled &&\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <RenderChart ID={props.ID} baseUrl={props.baseUrl} />\n        </Collapse>\n      }\n    </div>\n  )\n})\n\nconst RenderItem: React.FC<ItemRenderProps> = React.memo((props) => {\n  const [open, setOpen] = React.useState(false);\n\n  const secondary = <React.Fragment>\n    {props.HistoryEnabled &&\n      <FontAwesomeIcon icon=\"chart-area\" style={{ marginLeft: \"-12px\", marginRight: \"3px\" }} />\n    }\n    {props.LastUpdate &&\n      <React.Fragment>Updated: {props.LastUpdate}</React.Fragment>\n    }\n  </React.Fragment>\n\n  return (\n    <React.Fragment>\n      <ListItem className={props.className} onClick={() => { setOpen(!open) }}>\n        <ListItemIcon>\n          <React.Fragment>\n            <RenderGroupButton items={props.SubItems} isOpen={open} />\n            <RenderIcon img={props.Img} />\n          </React.Fragment>\n        </ListItemIcon>\n        <ListItemText primary={props.Label} secondary={secondary} />\n        <ListItemSecondaryAction>\n          <RenderType {...props} />\n        </ListItemSecondaryAction>\n      </ListItem>\n      {props.SubItems &&\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding>\n            {props.SubItems.map((item: Item) => (\n              <RenderSubItem\n                ID={item.ID}\n                Type={item.Type}\n                Img={item.Img}\n                Label={item.Label}\n                Value={item.Value}\n                Unit={item.Unit}\n                LastUpdate={item.LastUpdate}\n                HistoryEnabled={item.HistoryEnabled}\n                baseUrl={props.baseUrl} />\n            ))}\n          </List>\n        </Collapse>\n      }\n    </React.Fragment>\n  )\n})\n\nconst App: React.FC<Props> = React.memo((props) => {\n  const classes = useStyles();\n  const [data, setData] = useState({ Rows: Array<Row>() });\n  const [intervalID, setIntervalID] = useState(0);\n  const wsRef = useRef<any>(null);\n\n  const address = qs.parse(window.location.search).address;\n  const username = qs.parse(window.location.search).username;\n  const password = qs.parse(window.location.search).password;\n  const auth = password ? `${username}:${password}@` : '';\n  const baseUrl = address ? `http://${address}` : `http://${window.location.host}`;\n  const wsUrl = baseUrl.replace(\"http://\", `ws://${auth}`);\n  const isNative = qs.parse(window.location.search).mode === \"native\";\n\n  const onOpen = () => {\n    notify(\"Connected to events\", \"success\");\n\n    if (intervalID) {\n      return\n    }\n\n    var id = window.setInterval(() => {\n      wsRef!.current!.sendMessage(JSON.stringify(\"keepalive\"));\n    }, 2000);\n    setIntervalID(id);\n  };\n\n  const updateData = (item: Item, rows: Array<Row>) => {\n    rows.forEach((row: Row, i: number) => {\n      if (row.Item.ID === item.ID) {\n        row.Item = item;\n        return\n      }\n\n      if (row.SubItems) {\n        row.SubItems.forEach((curr: Item, i: number) => {\n          if (curr.ID === item.ID && row.SubItems) {\n            row.SubItems[i] = item\n\n            if (row.Item.Type == \"label\") {\n              row.Item.LastUpdate = item.LastUpdate\n            }\n            return\n          }\n        });\n      }\n    });\n  };\n\n  const onMessage = (msg: string) => {\n    var item: Item = JSON.parse(msg)\n\n    updateData(item, data.Rows);\n    setData({ Rows: data.Rows });\n  };\n\n  const onClose = () => {\n    notify(\"Event connection lost\", \"error\");\n\n    window.clearInterval(intervalID);\n    setIntervalID(0);\n  };\n\n  const notify = useCallback((msg: string, variant: VariantType) => {\n    props.enqueueSnackbar(msg, {\n      variant: variant,\n      autoHideDuration: 1000,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right',\n      }\n    })\n  }, [props]);\n\n  const fetchData = useCallback(() => {\n    var headers = new Headers();\n\n    if (password) {\n      var authString = `${username}:${password}`\n      headers.set('Authorization', 'Basic ' + btoa(authString));\n    }\n\n    fetch(`${baseUrl}/?type=json`, { headers: headers, keepalive: false }).then(resp => {\n      return resp.json().then(data => {\n        notify(\"Data retrieve succesfully\", \"info\");\n\n        setData(data);\n      });\n    }).catch((e) => {\n      notify(`Unable to load or parse topology data ${e}`, \"error\");\n\n      setTimeout(fetchData, 2000);\n    })\n  }, [notify, baseUrl, password, username]);\n\n  useEffect(() => {\n    fetchData();\n  }, [props, fetchData, wsRef]);\n\n  return (\n    <div className={classes.root}>\n      <Websocket ref={wsRef} url={`${wsUrl}/ws`} onOpen={onOpen} onMessage={onMessage} onClose={onClose}\n        reconnectIntervalInMilliSeconds={5000} />\n      <CssBaseline />\n      {!isNative &&\n        <React.Fragment>\n          <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar className={classes.toolbar} variant=\"dense\">\n              <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                H.A.S.C.\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </React.Fragment>\n      }\n      <Container className={clsx(classes.container, !isNative && classes.noHeader)}>\n        <List className={classes.content}>\n          {data.Rows.map((row: Row) => (\n            <RenderItem key={row.Item.ID}\n              ID={row.Item.ID}\n              Type={row.Item.Type}\n              Img={row.Item.Img}\n              Label={row.Item.Label}\n              Value={row.Item.Value}\n              Unit={row.Item.Unit}\n              LastUpdate={row.Item.LastUpdate}\n              SubItems={row.SubItems}\n              HistoryEnabled={false}\n              baseUrl={baseUrl} />\n          ))}\n        </List>\n      </Container>\n    </div>\n  );\n})\n\nexport default withSnackbar(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SnackbarProvider } from 'notistack';\n\nReactDOM.render(\n    <SnackbarProvider maxSnack={1}>\n        <App />\n    </SnackbarProvider>\n    , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}