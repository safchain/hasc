{"version":3,"sources":["AppStyle.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","height","toolbar","paddingRight","toolbarIcon","display","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","title","flexGrow","appBarSpacer","content","container","paddingLeft","paddingBottom","spacing","noHeader","paddingTop","paper","overflow","flexDirection","fabGreen","backgroundColor","fabRed","nested","btnGreen","btnRed","library","add","faTemperatureHigh","faKey","faChartBar","faTint","faFan","faWindowMaximize","faFire","faHdd","faMemory","faLaptop","faSlidersH","faBug","faLayerGroup","faMicrochip","faBolt","RenderIcon","props","img","icon","RenderSwitch","Switch","edge","value","color","onChange","event","fetch","baseUrl","oid","method","body","target","checked","RenderButton","classes","Button","variant","className","label","RenderValue","Typography","unit","RenderGroupButton","items","isOpen","viewBox","RenderState","Fab","aria-label","size","RenderType","type","count","Badge","badgeContent","Fragment","ItemID","item","id","toLowerCase","RenderItem","React","useState","open","setOpen","ListItem","onClick","ListItemIcon","ListItemText","primary","secondary","lastupdate","ListItemSecondaryAction","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","map","key","withSnackbar","Items","Array","data","setData","intervalID","setIntervalID","wsRef","useRef","address","qs","window","location","search","username","password","auth","host","wsUrl","replace","isNative","mode","notify","useCallback","msg","enqueueSnackbar","autoHideDuration","anchorOrigin","vertical","horizontal","fetchData","headers","Headers","authString","set","btoa","then","resp","json","catch","e","setTimeout","useEffect","ref","url","onOpen","setInterval","current","sendMessage","JSON","stringify","onMessage","updateData","forEach","curr","i","parse","onClose","clearInterval","reconnectIntervalInMilliSeconds","CssBaseline","AppBar","position","Toolbar","noWrap","Container","clsx","Boolean","hostname","match","ReactDOM","render","maxSnack","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.711bd142.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    height: '100%'\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n  },\n  container: {\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingBottom: theme.spacing(2),\n  },\n  noHeader: {\n    paddingTop: theme.spacing(5),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fabGreen: {\n    backgroundColor: \"#3fb553\"\n  },\n  fabRed: {\n    backgroundColor: \"#c74f4f\"\n  },\n  nested: {\n    paddingLeft: theme.spacing(5),\n  },\n  btnGreen: {\n    backgroundColor: \"#3fb553\"\n  },\n  btnRed: {\n    backgroundColor: \"#c74f4f\"\n  }\n}));\n","import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport clsx from 'clsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Switch from '@material-ui/core/Switch';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport { withSnackbar, WithSnackbarProps, VariantType } from 'notistack';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTemperatureHigh, faChartBar, faTint, faFan, faWindowMaximize, faFire, faHdd } from '@fortawesome/free-solid-svg-icons';\nimport { faMemory, faLaptop, faSlidersH, faBug, faLayerGroup, faMicrochip, faBolt } from '@fortawesome/free-solid-svg-icons';\nimport { faKey } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Fab from '@material-ui/core/Fab';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Collapse from '@material-ui/core/Collapse';\nimport Badge from '@material-ui/core/Badge';\nimport Websocket from 'react-websocket';\nimport * as qs from 'query-string';\n\nimport { useStyles } from './AppStyle';\nimport './App.css';\n\nlibrary.add(faTemperatureHigh, faKey);\nlibrary.add(faChartBar, faKey);\nlibrary.add(faTint, faKey);\nlibrary.add(faFan, faKey);\nlibrary.add(faWindowMaximize, faKey);\nlibrary.add(faFire, faKey);\nlibrary.add(faHdd, faKey);\nlibrary.add(faMemory, faKey);\nlibrary.add(faLaptop, faKey);\nlibrary.add(faSlidersH, faKey);\nlibrary.add(faBug, faKey);\nlibrary.add(faLayerGroup, faKey);\nlibrary.add(faMicrochip, faKey);\nlibrary.add(faBolt, faKey);\n\ninterface Props extends WithSnackbarProps { }\n\ninterface Item {\n  id: string\n  oid: string\n  type: string\n  label: string\n  value: string\n  img: string\n  unit: string\n  items?: Array<Item>\n  lastupdate: string\n}\n\ninterface ItemRenderProps {\n  className?: string\n  oid: string\n  type: string\n  label: string\n  value: string\n  img: string\n  unit: string\n  items?: Array<Item>\n  lastupdate: string\n  baseUrl: string\n}\n\ninterface IconRenderProps {\n  img: string\n}\n\nconst RenderIcon: React.FC<IconRenderProps> = (props) => {\n  switch (props.img) {\n    case \"temperature\":\n      return (<FontAwesomeIcon icon=\"temperature-high\" />);\n    case \"humidity\":\n      return (<FontAwesomeIcon icon=\"tint\" />);\n    case \"fan\":\n      return (<FontAwesomeIcon icon=\"fan\" />);\n    case \"window\":\n      return (<FontAwesomeIcon icon=\"window-maximize\" />);\n    case \"radiator\":\n      return (<FontAwesomeIcon icon=\"fire\" />);\n    case \"hdd\":\n      return (<FontAwesomeIcon icon=\"hdd\" />);\n    case \"mem\":\n      return (<FontAwesomeIcon icon=\"memory\" />);\n    case \"sys\":\n      return (<FontAwesomeIcon icon=\"laptop\" />);\n    case \"settings\":\n      return (<FontAwesomeIcon icon=\"sliders-h\" />);\n    case \"dev\":\n      return (<FontAwesomeIcon icon=\"bug\" />);\n    case \"group\":\n      return (<FontAwesomeIcon icon=\"layer-group\" />);\n    case \"cpu\":\n      return (<FontAwesomeIcon icon=\"microchip\" />);\n    case \"electricity\":\n      return (<FontAwesomeIcon icon=\"bolt\" />);\n  }\n\n  return (\n    <FontAwesomeIcon icon=\"chart-bar\" />\n  )\n};\n\nconst RenderSwitch: React.FC<ItemRenderProps> = (props) => {\n  const onChange = (event: any) => {\n    fetch(`${props.baseUrl}/object/` + props.oid, {\n      method: 'POST',\n      body: event.target.checked ? \"ON\" : \"OFF\"\n    })\n  }\n\n  return (\n    <Switch\n      edge=\"end\"\n      value={props.value === \"ON\"}\n      color=\"primary\"\n      onChange={onChange}\n    />\n  )\n};\n\nconst RenderButton: React.FC<ItemRenderProps> = (props) => {\n  const classes = useStyles();\n\n  return (\n    <Button variant=\"contained\" color=\"primary\" className={props.value === \"ON\" ? classes.btnGreen : \"\"}>\n      {props.label}\n    </Button>\n  )\n};\n\nconst RenderValue: React.FC<ItemRenderProps> = (props) => {\n  return (\n    <Typography>{props.value}{props.unit}</Typography>\n  )\n};\n\ninterface groupRenderProps {\n  items?: Array<Item>\n  isOpen: boolean\n}\n\nconst RenderGroupButton: React.FC<groupRenderProps> = (props) => {\n  if (props.items) {\n    if (!props.isOpen) {\n      return (<ExpandLess />);\n    }\n    return (<ExpandMore />);\n  }\n  return (\n    <svg viewBox=\"0 0 24 24\" />\n  )\n};\n\nconst RenderState: React.FC<ItemRenderProps> = (props) => {\n  const classes = useStyles();\n\n  if (props.value === \"ON\") {\n    return (\n      <Fab color=\"primary\" aria-label=\"OK\" size=\"small\" className={classes.fabGreen}>\n        <CheckIcon />\n      </Fab>\n    )\n  }\n  return (\n    <Fab color=\"primary\" aria-label=\"KO\" size=\"small\" className={classes.fabRed}>\n      <CloseIcon />\n    </Fab>\n  )\n};\n\nconst RenderType: React.FC<ItemRenderProps> = (props) => {\n  const classes = useStyles();\n\n  switch (props.type) {\n    case \"switch\":\n      return (\n        <RenderSwitch {...props} />\n      )\n    case \"value\":\n      return (\n        <RenderValue {...props} />\n      )\n    case \"state\":\n      return (\n        <RenderState {...props} />\n      )\n    case \"button\":\n      return (\n        <RenderButton {...props} />\n      )\n    case \"timer\":\n      const value = props.value === \"OFF\" ? \"OFF\" : \"ON\";\n      const count = (props.value !== \"OFF\" && props.value !== \"ON\") ? props.value : \"0\"\n\n      return (\n        <Badge color=\"primary\" badgeContent={count}>\n          <Button variant=\"contained\" color=\"primary\" className={props.value === \"ON\" ? classes.btnGreen : classes.btnRed}>\n            {value}\n          </Button>\n        </Badge>\n      )\n    default:\n      return (\n        <React.Fragment />\n      )\n  }\n};\n\nconst ItemID = (item: Item): string => {\n  if (item.oid && item.id) {\n    return item.oid + '-' + item.id\n  }\n  return item.label.toLowerCase()\n};\n\nconst RenderItem: React.FC<ItemRenderProps> = (props) => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <React.Fragment>\n      <ListItem className={props.className} onClick={() => { setOpen(!open) }}>\n        <ListItemIcon>\n          <React.Fragment>\n            <RenderGroupButton items={props.items} isOpen={open} />\n            <RenderIcon img={props.img} />\n          </React.Fragment>\n        </ListItemIcon>\n        <ListItemText primary={props.label} secondary={props.lastupdate ? \"Updated: \" + props.lastupdate : \"\"} />\n        <ListItemSecondaryAction>\n          <RenderType {...props} />\n        </ListItemSecondaryAction>\n      </ListItem>\n      {props.items &&\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" disablePadding>\n            {props.items.map((item: Item) => (\n              <RenderItem key={ItemID(item)} className={classes.nested}\n                oid={item.oid}\n                type={item.type}\n                img={item.img}\n                label={item.label}\n                value={item.value}\n                unit={item.unit}\n                lastupdate={item.lastupdate}\n                items={item.items}\n                baseUrl={props.baseUrl}\n              />\n            ))}\n          </List>\n        </Collapse>\n      }\n    </React.Fragment>\n  )\n};\n\nconst updateData = (item: Item, items: Array<Item>) => {\n  items.forEach((curr: Item, i: number) => {\n\n    if (curr.id === item.id && curr.oid === item.oid) {\n      items[i] = item;\n    }\n\n    if (curr.items) {\n      updateData(item, curr.items);\n    }\n  });\n};\n\nconst App: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  const [data, setData] = useState({ Items: Array<Item>() });\n  const [intervalID, setIntervalID] = useState(0);\n  const wsRef = useRef<any>(null);\n\n  const address = qs.parse(window.location.search).address;\n  const username = qs.parse(window.location.search).username;\n  const password = qs.parse(window.location.search).password;\n  const auth = `${username}:${password}`\n  const baseUrl = address ? `http://${address}` : `http://${window.location.host}`;\n  const wsUrl = baseUrl.replace(\"http://\", `ws://${auth}@`);\n  const isNative = qs.parse(window.location.search).mode === \"native\";\n\n  const onOpen = () => {\n    notify(\"Connected to events\", \"success\");\n\n    if (intervalID) {\n      return\n    }\n\n    var id = window.setInterval(() => {\n      wsRef!.current!.sendMessage(JSON.stringify(\"keepalive\"));\n    }, 2000);\n    setIntervalID(id);\n  };\n\n  const onMessage = (msg: string) => {\n    var item: Item = JSON.parse(msg)\n\n    updateData(item, data.Items);\n    setData({ Items: data.Items });\n  };\n\n  const onClose = () => {\n    notify(\"Event connection lost\", \"error\");\n\n    window.clearInterval(intervalID);\n    setIntervalID(0);\n  };\n\n  const notify = useCallback((msg: string, variant: VariantType) => {\n    props.enqueueSnackbar(msg, {\n      variant: variant,\n      autoHideDuration: 1000,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right',\n      }\n    })\n  }, [props]);\n\n  const fetchData = useCallback(() => {\n    var headers = new Headers();\n\n    if (password) {\n      var authString = `${username}:${password}`\n      headers.set('Authorization', 'Basic ' + btoa(authString));\n    }\n\n    fetch(`${baseUrl}/?type=json`, { headers: headers }).then(resp => {\n      return resp.json().then(data => {\n        notify(\"Data retrieve succesfully\", \"info\");\n\n        setData(data);\n      })\n    }).catch((e) => {\n      notify(`Unable to load or parse topology data ${e}`, \"error\");\n\n      setTimeout(fetchData, 2000);\n    })\n  }, [notify, baseUrl]);\n\n  useEffect(() => {\n    fetchData();\n  }, [props, fetchData, wsRef]);\n\n  return (\n    <div className={classes.root}>\n      <Websocket ref={wsRef} url={`${wsUrl}/ws`} onOpen={onOpen} onMessage={onMessage} onClose={onClose}\n        reconnectIntervalInMilliSeconds={5000} />\n      <CssBaseline />\n      {!isNative &&\n        <React.Fragment>\n          <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar className={classes.toolbar} variant=\"dense\">\n              <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n                H.A.S.C.\n            </Typography>\n            </Toolbar>\n          </AppBar>\n        </React.Fragment>\n      }\n      <Container className={clsx(classes.container, !isNative && classes.noHeader)}>\n        <List className={classes.content}>\n          {data.Items.map((item: Item) => (\n            <RenderItem key={ItemID(item)}\n              oid={item.oid}\n              type={item.type}\n              img={item.img}\n              label={item.label}\n              value={item.value}\n              unit={item.unit}\n              lastupdate={item.lastupdate}\n              items={item.items}\n              baseUrl={baseUrl} />\n          ))}\n        </List>\n      </Container>\n    </div>\n  );\n}\n\nexport default withSnackbar(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { SnackbarProvider } from 'notistack';\n\nReactDOM.render(\n    <SnackbarProvider maxSnack={1}>\n        <App />\n    </SnackbarProvider>\n    , document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}